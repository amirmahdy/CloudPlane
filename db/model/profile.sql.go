// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: profile.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (id, description, region, cred_id, username)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, description, region, cred_id, username
`

type CreateProfileParams struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
	Region      string    `json:"region"`
	CredID      uuid.UUID `json:"cred_id"`
	Username    string    `json:"username"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.queryRow(ctx, q.createProfileStmt, createProfile,
		arg.ID,
		arg.Description,
		arg.Region,
		arg.CredID,
		arg.Username,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Region,
		&i.CredID,
		&i.Username,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
SELECT region, c.access_id, c.secret_key FROM profiles p 
INNER JOIN credentials c ON c.id = p.cred_id 
WHERE p.username = $1 LIMIT $2
`

type GetProfilesParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
}

type GetProfilesRow struct {
	Region    string `json:"region"`
	AccessID  string `json:"access_id"`
	SecretKey string `json:"secret_key"`
}

func (q *Queries) GetProfiles(ctx context.Context, arg GetProfilesParams) ([]GetProfilesRow, error) {
	rows, err := q.query(ctx, q.getProfilesStmt, getProfiles, arg.Username, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProfilesRow{}
	for rows.Next() {
		var i GetProfilesRow
		if err := rows.Scan(&i.Region, &i.AccessID, &i.SecretKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
