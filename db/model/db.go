// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCredentialStmt, err = db.PrepareContext(ctx, createCredential); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCredential: %w", err)
	}
	if q.createProfileStmt, err = db.PrepareContext(ctx, createProfile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProfile: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getProfilesStmt, err = db.PrepareContext(ctx, getProfiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetProfiles: %w", err)
	}
	if q.getUserPasswordStmt, err = db.PrepareContext(ctx, getUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserPassword: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCredentialStmt != nil {
		if cerr := q.createCredentialStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCredentialStmt: %w", cerr)
		}
	}
	if q.createProfileStmt != nil {
		if cerr := q.createProfileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createProfileStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getProfilesStmt != nil {
		if cerr := q.getProfilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProfilesStmt: %w", cerr)
		}
	}
	if q.getUserPasswordStmt != nil {
		if cerr := q.getUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPasswordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	createCredentialStmt *sql.Stmt
	createProfileStmt    *sql.Stmt
	createUserStmt       *sql.Stmt
	getProfilesStmt      *sql.Stmt
	getUserPasswordStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		createCredentialStmt: q.createCredentialStmt,
		createProfileStmt:    q.createProfileStmt,
		createUserStmt:       q.createUserStmt,
		getProfilesStmt:      q.getProfilesStmt,
		getUserPasswordStmt:  q.getUserPasswordStmt,
	}
}
