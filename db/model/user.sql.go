// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, full_name, email, hashed_password
) VALUES (
    $1, $2, $3, $4
)
RETURNING username, full_name, hashed_password, email, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.FullName,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT hashed_password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserPassword(ctx context.Context, username string) (string, error) {
	row := q.queryRow(ctx, q.getUserPasswordStmt, getUserPassword, username)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}
